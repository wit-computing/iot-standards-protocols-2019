


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Presence Detector 1",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>WiFi · MAC Address · ARP Scan · CronTab</p>",
  "folder" : "book-a",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# WiFi-based Presence Detector - Part 1",
    "shortTitle": "Presence Detector 1",
    "contentMd" : "# WiFi-based Presence Detector - Part 1\r\n\r\nWiFi · MAC Address · ARP Scan · CronTab\r\n\r\n## Introduction\r\n\r\nIn this lab you will use a WiFi local network and a Raspberry Pi/SenseHAT to build a device presence detector.\r\nYou will scan the WiFi network for connected devices and identify them using their MAC address, the unique identifiers that devices use when communicating in a WiFi network.\r\nAn application of this is to check who is home/in the office/lab (and not home) by checking if a person's smartphone has connected to the WiFi.\r\n\r\n## Equipment\r\n+ Raspberry pi 3 and SD Card installed with Raspbian\r\n+ SenseHAT\r\n+ A Wifi network with internet access\r\n+ OPTIONAL: Screen with HDMI, Keyboard, Mouse."
    },
  
    {
    "title": "# arp-scan",
    "shortTitle": "01",
    "contentMd" : "# arp-scan\r\n\r\n[arp-scan](https://www.netscantools.com/nstpro_arp_scan.html) is a fast ARP packet scanner that can find all active IPv4 devices on a network.  Devices cannot hide from ARP packets like they can hide from Ping and it should detect all devices including those with firewalls.\r\n\r\nTo install arp-scan, connect to your RPi 3 in your preferred manner (e.g. [headless]() or [screen-based]())\r\n\r\nOpen a terminal window on the Raspberry Pi and enter the following command:\r\n~~~bash\r\nsudo apt-get update\r\nsudo apt-get install arp-scan\r\n~~~\r\nOnce installed, check that it's working correctly by entering the command on the Raspberry Pi: ``sudo arp-scan -l``. This will list all devices on your local network that responded . You should see a list of devices and corresponding IP and MAC addresses on your local network. It may take a moment to load if you are on a large network:\r\n![ARP Scan](./img/arp-scan1.png)  \r\n\r\n- Question: If you had to write a program to replicate the list function in arp-scan, how would you do it? \r\n\r\n## Presence detection\r\n\r\nARP-Scan lists all devices (if any) connected your local network at the time the scan was executed. By scanning the local network for certain devices’ MAC addresses, we can detect their 'presence' on the network. Furthermore, if connected by WiFi, we can deduce that the physical device itself is within the range of the WiFi access point (e.g. at home).\r\n\r\n- There are various ways of finding a particular device MAC address and a quick internet search will soon let you know how to find the MAC address for the WiFi interface on your Smartphone.  \r\n\r\n- Find and record the MAC address of your smartphones Wifi interface (or if you're not using a Smarthone,  any other device on the Wifi Network for now)\r\n\r\n- Check for the presence of the device by doing a 'grep' on the device list returned by apr-scan:\r\n~~~bash\r\nsudo arp-scan -l | grep YOUR_DEVICE_MAC\r\n~~~\r\n![ARP Scan](./img/arp-scan2.png)  \r\nIf your device was found, the command will output its address info. If nothing appears, make sure that it’s connected to the same local WiFi network as your RPi. Smart devices are fairly energy efficient so you may also need to 'wake up' your device, as it may drop the WiFi connection if left idle for too long.\r\n\r\nNow that we have a mechanism to detect known devices on the local network, we can write a short python program to get the RPi/SenseHAT to indicate the presence/absence of a device."
    },
  
    {
    "title": "# Presence Detector Script  ",
    "shortTitle": "02",
    "contentMd" : "# Presence Detector Script  \r\nUsing ``arp-scan``, you will now write a script that:\r\n\r\n- gets a list of connected devices to the local network\r\n- gets a list of \"known devices\"\r\n- echoes(prints) the intersection of connected devices and known devices\r\n\r\nPut simply, the progran will find the list of known devices that are connected to the network.\r\n\r\n## Create the Search Script\r\n- On the RPi, open a terminal window (connect either by SSH or Screen/Keyboard), and, in your home directory, create a new directory called ``presence``:\r\n\r\n![Make Directory](./img/presence1.png)  \r\nIn this directory, create a new file in called ``presence-detect.sh`` and enter the following code:\r\n~~~bash\r\n#! /bin/bash\r\n\r\n# presence-detect.sh\r\n# searches for the MAC address of known devices\r\n\r\n# do arp_scan to get connected mac addresses\r\nconnectedDevices=$(sudo arp-scan -l)\r\n\r\nknownDevices=(\"d4:28:d5:37:7e:a2\")\r\n\r\nfor device in \"${knownDevices[@]}\"\r\ndo\r\n    if [[ \"$connectedDevices\" = *\"$device\"* ]]; then\r\n        echo \"$device is present!\"\r\n    else\r\n        echo \"$device is NOT present!\"\r\n    fi\r\ndone\r\n~~~\r\n\r\n- Save the file and change the files permissions to make it executable:\r\n\r\n~~~bash\r\nchmod +x presence-detect.sh\r\n~~~\r\n\r\n- Test the script by running it at the command line (./presence-detect.sh) . \r\n\r\n![Presence Detector](./img/presence2.png)  \r\n\r\nThe script gets the result of ``arp-scan`` and assigns it to connectedDevices.  It then searches ``connectedDevices`` for each MAC addresses contained in the ``knownDevices`` array (the above script only contains my phones MAC address).  \r\nThe script should return indicating that the device was not detected (otherwise I want my phone back!).  \r\n\r\n- Now update the script and add another device in the ``knownDevices`` list that you can connect/disconnect easily. Perhaps add in your smartphones address.\r\n\r\n~~~bash\r\nknownDevices=(\"d4:28:d5:37:7e:a2\" \"xx:xx:xx:xx:xx:xx\")\r\n~~~\r\n\r\nNow run the script again. Make sure you get a result that has both outcomes (present and not present)."
    },
  
    {
    "title": "# Python ARP-Scan",
    "shortTitle": "03",
    "contentMd" : "# Python ARP-Scan\r\n\r\nIn order to access easily higher order functions on the RPi such as SenseHAT and messaging protocols, we'll now switch to using Python, a good general purpose programming library that's already installed on the RPi,\r\n\r\n## Scanning for MAC addresses with Python\r\nWe can call the ``arp-scan`` program from a Python program using the ``subprocess`` library.\r\n\r\n- In the ``presence`` directory you created earlier, create a new file called ``presence-detector.py`` with the following content:\r\n\r\n~~~python\r\n#!/usr/bin/env python\r\n#coding=utf-8\r\n\r\nimport subprocess\r\n\r\ndef arp_scan():\r\n        output = subprocess.check_output(\"sudo arp-scan -l\", shell=True)\r\n        print output\r\n\r\narp_scan()\r\n~~~\r\n\r\n- Run the program by typing ``python presence-detector.py`` on the command prompt. You should see the ``arp-scan`` output printed on the console similar to the following:\r\n\r\n![ARP Scan with Python](./img/python-arp1.png)\r\n\r\nUsing this program we can now get at the MAC address list programatically.\r\n\r\n- To search the output for a particular MAC addresses, lets introduce two lists into our program, device owner names (``names``) and corresponding MAC addresses (``macs``).\r\nNotice the order of the names and devices correlate(i.e. Frank's device MAC address is ``\"d4:28:d5:37:7e:a2\"``). **As before, you should add a name and device that is present on the local network.**\r\n\r\n~~~python\r\n#!/usr/bin/env python\r\n#coding=utf-8\r\n\r\nimport subprocess\r\n\r\n#Names of device owners \r\nnames = [\"Frank\",\"Someone Else\"]\r\n\r\n# MAC addresses of devices\r\nmacs = [\"d4:28:d5:37:7e:a2\",\"xx:xx:xx:xx:xx:xx\"]\r\n\r\ndef arp_scan():\r\n        output = subprocess.check_output(\"sudo arp-scan -l\", shell=True)\r\n        for i in range(len(names)):\r\n                if macs[i] in output:\r\n                        print(names[i] + \"'s device is present\")\r\n                else:\r\n                        print(names[i] + \"'s device is NOT present\")\r\n\r\narp_scan()\r\n~~~\r\n\r\n- Test this program and make sure it works by placing a known device in the arrays. Run the program from the command line as before:  \r\n![ARP Scan with Python](./img/presence3.png).  \r\n\r\nNext we'll use the SenseHat to output the results.  "
    },
  
    {
    "title": "# SenseHAT",
    "shortTitle": "04",
    "contentMd" : "# SenseHAT\r\n\r\nIn this section you will ouput the presence detection result using SenseHAT.\r\nThe SenseHAT can be controlled using the [SenseHat](https://pythonhosted.org/sense-hat/) Python module. \r\n\r\n- If you have not already, install the python module by opening a terminal window on your RPi and running the following commands:\r\n\r\n~~~bash\r\nsudo apt-get update\r\nsudo apt-get install sense-hat\r\nsudo reboot\r\n~~~\r\n\r\n- First, let's just output the ``result`` to the 8x8 LED display. Update your program by adding the following import statement at the top of the python program:\r\n\r\n~~~python\r\nfrom sense_hat import SenseHat\r\n\r\nsense = SenseHat()\r\n~~~\r\n\r\nWe will use two arrays to keep track of the names and corresponding device MAC addresses. Add the following array declarations to your program **just before the ``arp-scan()`` function.\r\n\r\n- Change the ``arp_scan()`` Python function to iterate through the ``names`` array and check the ``arp-scan`` for the corresponding MAC address. Replace the ``arp_scan()`` with the following code:\r\n\r\n~~~python\r\ndef arp_scan():\r\n        output = subprocess.check_output(\"sudo arp-scan -l\", shell=True)\r\n        for i in range(len(names)):\r\n                result = names[i]\r\n                if macs[i] in output:\r\n                        result=result+\" is home\"\r\n                else:\r\n                        result=result+\" is not home\"\r\n                print(result)\r\n                sense.show_message(result)\r\n~~~\r\n\r\nNow your program will, for each name:\r\n\r\n- check the arp-scan ``output`` for the MAC address of his/her device.\r\n- print the ``result`` to the console and show the result on the SenseHAT 8x8 LED. \r\n\r\nRun the program as before and you should see something similar to the following:  \r\n![SenseHAT 8x8 LED](./img/sense-hat1.gif)"
    },
  
    {
    "title": "# Automate Presence Detection",
    "shortTitle": "05",
    "contentMd" : "# Automate Presence Detection\r\nAt the moment, you have to run your presence detection script manually on the RPi. Ideally, your script would run automatically at a set interval, perhaps every minute.\r\n## Loop forever \r\nAdd an endless loop in the program that waits of 60 seconds after every successful call to the apr-scan() function. You can use the ``sleep()`` function in the ``time`` python package to do this. \r\n\r\n- In ``presence-detector.py``, add the following import statement at the top of the file:\r\n\r\n```python\r\nfrom time import sleep\r\n```\r\n\r\n- Put the call to the ``arp_scan()`` function in an endless loop(``while True:``) and add code to suspend execution for 60 seconds(``sleep(60)``) on each iteration:\r\n\r\n~~~python\r\nwhile True:\r\n        arp_scan()\r\n        sleep(60)\r\n~~~\r\n\r\n- Run the program again. This time your program should never stop and should repeat the scan every 60 seconds.\r\n\r\n## When things go wrong...\r\nUsually, when perfoming any input/output or network connections with programming, it is a good idea to assume that at some stage the connection will fail or that the file you are trying to use might become unavailable. You can think of this as an \"exceptional\" event - you're not expecting it but it might happen.\r\nAlso, if we are running a device remotely and will not be attending, it may be a good idea to start logging information if an error or excpetional event does occur so that you can debug it.\r\n\r\nIn Python, error handling at run time in done through the use of exceptions that are caught in try blocks and handled in except blocks. We can then using logging to save details of the error for debugging later.\r\n\r\n- Add the following logging declaration to the ``precence-detector.py`` program\r\n\r\n~~~python\r\nimport logging\r\n\r\nlogging.basicConfig(filename='presence-detector.log',level=logging.INFO, format='%(asctime)s - %(message)s')\r\nlogging.info('Starting presencenan detector')\r\n\r\n~~~\r\n\r\nCurrently, in our ``presence-detector.py`` program, if an error occurs in the arp-scan() function the program will terminate. \r\n\r\n- In the arp-scan() function, surround the code with a try-except block that logs any errors that occur:\r\n\r\n~~~python\r\ndef arp_scan():\r\n        try:\r\n                output = subprocess.check_output(\"sudo arp-scan -l\", shell=True)\r\n                for i in range(len(names)):\r\n                        result = names[i]\r\n                        if macs[i] in output:\r\n                                result=result+\" is home\"\r\n                        else:\r\n                                result=result+\" is not home\"\r\n                        print(result)\r\n                        sense.show_message(result)\r\n        except Exception as e:\r\n                logging.error(e)\r\n\r\n~~~\r\n\r\n- Now run your program as before. It should work exactly as before but now you will have a log file in the same directory as your script. Check it's contents and you should see similar to the following:\r\n\r\n ~~~bash\r\n2018-10-16 09:09:11,225 - Starting presence detector\r\n ~~~\r\n\r\n## Crontab\r\n[cron](https://en.wikipedia.org/wiki/Cron) is a utility that allows tasks to be automatically run in the background at regular intervals. The Crontab (CRON TABle) is a file which contains the schedule of cron entries to be run and at specified times. The crontab File location varies by operating system however you can easily access it on the RPi using the ``crontab`` utility program.  \r\nIn a terminal window, enter ``crontab -e`` at the prompt:\r\n![Crontab](./img/cron1.png)  \r\nFollow the instructions and select your favourite editor (default is nano). At the end of the file, add ``@reboot nohup sudo /usr/bin/python /home/pi/presence/presence-detector.py &``:  \r\n![Crontab](./img/cron2.png)  \r\nSave and exit the Crontab and reboot the RPi by typing ``sudo reboot`` at the command prompt. The presence detector should now start in the background on every reboot of the RPi.\r\n\r\n- Check the log file now just to see if everything is OK. You may notice some errors the first time the script executes. If you do, try to come up with a reason and investigate a solution using the web.\r\n- If you do not get errors, how would you know if the simple exception handling/logging works? Propose a way to force an error in the try block of the code.\r\n"
    },
  
    {
    "title": "# Exercises/Report",
    "shortTitle": "06",
    "contentMd" : "# Exercises/Report\r\n\r\nInclude the following in your lab report\r\n\r\n1. If possible, include screen shots of your program working. \r\n2. Lessons learned\r\n3. Issues encountered and how you resolved them.\r\n5. On the Sensehat, change the program to display the names of those who are present in <span style=\"color:green\">green</span> and not present in <span style=\"color:red\">red</span>\r\n- The current program requires you to \"hardcode\" names and MAC addresses into the program. Try to update the program so that names and MAC addresses are read from a file or files. (e.g. create a file called ``devices.dat`` and read the file when the program starts).\r\n6. Final version of the code you created (or a link to an online repository)"
    }
  
  ]
  }

