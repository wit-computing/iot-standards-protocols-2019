


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Wia Lab",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>In this tutorial you will use Wia.io to collect and display data from the RPi. You will also use Wia to send commands to a device. </p>",
  "folder" : "book-a",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# WIA IoT Platform",
    "shortTitle": "Wia Lab",
    "contentMd" : "# WIA IoT Platform\r\n\r\nIn this tutorial you will use Wia.io to collect and display data from the RPi. You will also use Wia to send commands to a device. \r\n\r\n## Set up\r\n\r\n+ Create an account on [Wia.io](https://www.wia.io/)\r\n\r\n+ On your Raspberry Pi, install Wia by opening a terminal window and running the following command:\r\n\r\n```bash\r\npip install wia\r\n```\r\n\r\n+ Make a directory called ``iot-week9`` for your python programs\r\n\r\n```bash\r\nmkdir iot-week9\r\n```\r\n\r\n## Create a Device in Wia\r\nGo to the **Wia Dashboard** and select ``Create a New Space`` then select ``Devices``. Add a device and give it the name ``SensePi``. Now, in the ``Configuration`` tab for your device, you will find ``device_secret_key`` which should begin with ``d_sk``. This will be important later on.\r\n\r\n## Python Code\r\n\r\nIn the ``iot-week9`` directory, create a file called ``sensehat_wia.py`` containing following code:\r\n\r\n```python\r\nfrom wia import Wia\r\n\r\nwia = Wia()\r\nwia.access_token = \"Your access token\"\r\n\r\nwia.Event.publish(name=\"temperature\", data=21.5)\r\n```\r\n\r\n+ Run the program. In the **weather** space on the **Wia Dashboard**,  select ``Devices`` and check the ``temperature`` event has appeared in the ``Events`` tab for your device.\r\n\r\n![Temperature Event](./img/wia-event.png)\r\n\r\n+ Select the ``Overview`` tab and click the ``Add a Widget`` button. Add a widget called ``Temperature``. For the event field, make sure you type the event name exactly as it appears in the code (mind your case!). Your overview tab should be similar to the following:\r\n\r\n![Temperature Widget](./img/wia-widget.png)\r\n\r\nAll  going well, you now have code that interacts and creates events in Wia\r\n\r\n## Integrate SenseHat\r\n\r\nNow lets update the code to use the SenseHat sensor values to create events:\r\n\r\n+ Replace the code in ``senshat_wia.py`` with the following code:\r\n\r\n```python\r\nfrom wia import Wia\r\nfrom sense_hat import SenseHat\r\nsense = SenseHat()\r\n\r\nwia = Wia()\r\nwia.access_token = \"Your access token\"\r\n\r\ntemp=round(sense.get_temperature(),2)\r\nwia.Event.publish(name=\"temperature\", data=temp)\r\n```\r\n\r\nYou are now taking the temperature sensor reading from the SenseHat and publishing it to Wia\r\n\r\n+ Now, as before, run the script again and check your Wia space responds to the event.\r\n\r\n### **Exercise**\r\n\r\n+ update ``sensehat_wia.py`` to do the following:\r\n    + to create ``pressure`` and ``humidity`` events in your Wia space every 15 seconds.\r\n    + Add text widgets for pressure and humidity.\r\n    + Change the ``Temperature`` widget type to a graph(leave default values for ``Time period`` and ``Aggregate function``)\r\nAll going well, your  ``overview`` tab should now look like this and update every 15 seconds.\r\n\r\n![Wia Overview Tab](./img/wia-overview-all.png)\r\n\r\n"
    },
  
    {
    "title": "# Web Page",
    "shortTitle": "web-page",
    "contentMd" : "# Web Page\r\n\r\n+ In the same directory as your python script, create a new directory called ``html``.\r\n+ Create a file called ``index.html`` and add the following content:\r\n\r\n```html\r\n  <!DOCTYPE html>\r\n<html>\r\n  <head>\r\n    <meta charset=\"UTF-8\">\r\n  </head>\r\n  <body>\r\n\r\n    <h1>SenseHat Data</h1>\r\n\r\n  </body>\r\n</html>\r\n```\r\n+ Navigate back to your Wia Dashboard. In the overview for your device, you can see your widgets. In the upper right hand corner of the widget, there should be a box with an arrow. Click the box. A screen like this should pop up.\r\n\r\n![Embed Widget](./img/widget-share.png)\r\n\r\n+ Select ``Anyone can view this widget and embed it in any website.`` You should also see Embed code, which will start with ``<iframe>`` and end with ``</iframe>``. Copy the entire code and paste it below the ``<h1>SenseHat Weather Station</h1>`` line and above the ``</body>`` line.\r\n+ View your ``index.html`` page in a browser. It should look similar to the following:\r\n\r\n![HTML Page](./img/html-page.png)\r\n\r\n## Put it on the web\r\n\r\nYou can use GitHub to host your webpage so that anybody on the web can view it.\r\n\r\nIf you don't have a github account already, [you can make one here](https://github.com/).\r\n\r\nOnce you are set up with github, create a new repository and name it ``your-github-username.github.io``. Check the box to initialize with a README.\r\n\r\nNow, navigate to your new repository and create a new file. It must be named index.html. Copy and paste the code from ``index.html``.\r\nClick commit changes. Now, visit your site at https://username.github.io. You're on the Web!"
    },
  
    {
    "title": "## Smile, you're on camera.",
    "shortTitle": "photo-event",
    "contentMd" : "## Smile, you're on camera.\r\n\r\nYou will now use Wia events, commands and flows to control the SenseHat using facial expressions.\r\nWia uses MQTT and the publish-subscribe pattern we talked about in class in their commands functionality. \r\n\r\n### Create Commands\r\n\r\n+ Inside your Device Dashboard click on the ``Commands`` and then click ``Add Command``\r\n+ Add a ``happy-face`` and ``sad-face`` commands. You will use these commands to control the Raspberry Pi with a smile!\r\n\r\n![Add Photo Command](./img/add-command.png)\r\n\r\n+ When finished, the commands tab should look like this:\r\n\r\n![Commands](./img/commands.png)\r\n\r\n\r\n## Create Photo Events\r\n\r\nYou will now write a small program that will take a photo and create **photo** events in Wia. **PLEASE CHOOSE ONE OF THE FOLLOWING OPTIONS TO ACCOMPISH THIS** \r\n\r\n### OPTION  1: **Using a Raspberry Pi Camera**\r\n\r\n+ Connect a Pi camera module to the Pi. Follow the instuctions [here](https://projects.raspberrypi.org/en/projects/getting-started-with-picamera/4)\r\n+ Open a terminal window on the RPi and enter ``sudo raspi-config``\r\n+ Select option ``5 Interfacing Options``\r\n\r\n![raspi-conf](./img/pi-conf1.png)\r\n\r\n+ Select ``P1 Camera`` and enable the camera interface:\r\n\r\n![Enable camera](./img/picam.png)\r\n\r\nYour camera is ready to go! Exit ``raspi-conf`` by selecting ``back``/``exit``.\r\n\r\n#### Create Python Program\r\n\r\n+ In the directory you created earlier called ``iot-week9`` create a file called ``snap.py``.\r\n+ Enter the following code in the file and save. \r\n\r\n~~~python\r\nfrom wia import Wia\r\nimport time\r\nfrom picamera import PiCamera\r\n\r\nwia = Wia()\r\n## INSERT YOUR SECRET KET\r\nwia.access_token = 'YOUR_SECRET_KEY'\r\ncamera = PiCamera()\r\n\r\n## Halt execution until\r\ninput('Look at the camera and hit \"Enter\" to take a pic...')\r\n\r\n## Start up PiCam\r\ncamera.start_preview()\r\n## sleep for a few seconds to let camera focus/adjust to light\r\ntime.sleep(5)\r\n## Capture photo\r\ncamera.capture('/home/pi/image.jpg')\r\n## Stop the PiCam\r\ncamera.stop_preview()\r\n\r\n## Publish \"photo\" event to Wia. Include the photo file. \r\nresult = wia.Event.publish(name='photo', file=open('/home/pi/image.jpg', 'rb'))\r\n~~~\r\n\r\n+ Now, open a terminal window in the ``iot-week9`` directory run the script by entering the following command: \r\n\r\n```python\r\npython3 snap.py\r\n``` \r\n\r\n+ You should see an image file appear in  ``/home/pi/image.jpg``.\r\n+ Go to Wia and check that a new ``photo`` event has appeared.\r\n\r\n![Photo Event](./img/waievent.png)\r\n\r\n### **OPTION 2:** Using a Laptop Webcam\r\n\r\n1. Post photo from webcam\r\n\r\n+ Install OpenCV\r\n\r\n```bash\r\nsudo pip install opencv-python\r\n```\r\n\r\n+ If not already installed, install Wia\r\n\r\n```bash\r\nsudo pip install wia\r\n```\r\n+ On your laptop workstation, create a directory called ``python-photo``. \r\n+ Create a file called ``snap.py`` and enter the following code:\r\n\r\n```python\r\nimport cv2\r\nfrom wia import Wia\r\nimport os\r\nimport time\r\n\r\ninput('Hit any key to take a pic...')\r\nvc = cv2.VideoCapture(0)\r\nwia = Wia()\r\nwia.access_token = 'YOUR_DEVICE_SECRET_KEY'\r\nfile_name='wia-pic.jpg'\r\n\r\nif vc.isOpened(): # try to get the first frame\r\n        rval, frame = vc.read()\r\n        cv2.imwrite(file_name,frame) # writes image test.bmp to disk\r\n        dir_path = os.path.dirname(os.path.realpath(__file__))\r\n        result = wia.Event.publish(name='photo', file=open(dir_path + '/' + file_name, 'rb'))\r\nelse:\r\n        rval = False\r\n```\r\n\r\n+ Change the ``wia.access_token`` to your key and run the program. \r\n+ Look into the camera and press andy key. Your photo will be published as an event on Wia. Log into Wia and you should see the event recorded, similar to the following.\r\n\r\n![The photo event](./img/photo-event.png)"
    },
  
    {
    "title": "# Wia Flows",
    "shortTitle": "wia-flow",
    "contentMd" : "# Wia Flows\r\n\r\nYou will now create a **Flow**  that is triggered by ``photo`` events:\r\n\r\n+ In the Wia dashboard, click on the flow option on the left side.  Create a new Flow as follows:\r\n\r\n![Photo processing flow](./img/flow.png)\r\n\r\n + The trigger is when a ``photo`` event is created by the ``sensepi`` device. \r\n + This then goes through a ``Detect Faces`` service node, the output of which branches off into two ``Run Function`` logic nodes; one to output a string \"Yes\" if the subject is smiling, and one to output a string \"No\" if the subject isn't smiling. Here's the code for the 'smiling' logic node:\r\n\r\n~~~javascript\r\nif (input.body.faceDetails && input.body.faceDetails.length > 0) {\r\n   output.body.isSmiling = input.body.faceDetails[0].smile.value;\r\n  if (output.body.isSmiling){\r\n    output.process = true;\r\n    output.body.data = \"Yes\";\r\n    }else{\r\n    output.process = false;\r\n    }\r\n} else {\r\n\toutput.process = false;\r\n  output.body.data = false;\r\n}\r\n~~~\r\n\r\n+ The Javascript code for the ``not smiling`` node is as follows:\r\n\r\n```javascript\r\nif (input.body.faceDetails && input.body.faceDetails.length > 0) {\r\n   output.body.isSmiling = input.body.faceDetails[0].smile.value;\r\n  if (!output.body.isSmiling){\r\n    output.process = true;\r\n    output.body.data = \"No\";\r\n    }else{\r\n    output.process = false;\r\n    }\r\n} else {\r\n\toutput.process = false;\r\n  output.body.data = false;\r\n}\r\n```\r\n\r\nIf the subject is smiling, the 'happy-face' Command is run, triggering the RPi to display a happy emoticon on the SenseHat. If the subject isn't smiling, the 'sad-face' Command is run, displaying a sad emoticon on the SenseHat.\r\n\r\n+ Now add a photo widget on the ``SensePi`` devices overview page and link it to the ``photo`` event as follows:\r\n\r\n![Photo Widget](./img/photo-widget.png)\r\n\r\n+ As an exercise, add a ``Text`` widget and link it to the ``happy`` event.\r\n\r\n## Update Raspberry Pi \r\n\r\n+ Open a terminal window and run the following command in the ``iot_week9`` directory containing ``sensehat-wia.py``\r\n\r\n```bash\r\nwget http://rpf.io/shfaces -O faces.py\r\n```\r\n\r\n+ Update the code in ``sensehat_wia.py`` to subscribe to the commands and show the corresponding emoticon by updating the code to the following:\r\n\r\n```python\r\nfrom wia import Wia\r\nfrom sense_hat import SenseHat\r\nimport time\r\nfrom faces import normal, happy, sad\r\n\r\n# happy face callback\r\ndef on_happy_face(event):\r\n    print(\":)\")\r\n    sense.set_pixels(happy)\r\n\r\n# sad face callback\r\ndef on_sad_face(event):\r\n    print(\":(\")\r\n    sense.set_pixels(sad)\r\n\r\nsense = SenseHat()\r\n\r\nwia = Wia()\r\nwia.access_token = 'd_sk_JFODUgcmYToVZSd7JP8xrt54'\r\ndeviceId = 'dev_NEJjk3oa'\r\n\r\nwia.Stream.connect()\r\n\r\n# Subscribe to happy and sad face commands\r\nwia.Command.subscribe(**{\"device\": deviceId, \"slug\": 'happy-face', \"func\": on_happy_face})\r\nwia.Command.subscribe(**{\"device\": deviceId, \"slug\": 'sad-face', \"func\": on_sad_face})\r\n\r\n\r\nwhile True:\r\n        temp=round(sense.get_temperature(),2)\r\n        press=round(sense.get_pressure(),2)\r\n        hum=round(sense.get_humidity(),2)\r\n        #publish temp/pressure/hum\r\n        wia.Event.publish(name=\"temperature\", data=temp)\r\n        wia.Event.publish(name=\"pressure\", data=press)\r\n        wia.Event.publish(name=\"humidity\", data=hum)    \r\n        time.sleep(60)\r\n\r\n```\r\n\r\n+ Run the program on the RPi and take another photo. It should now indicate if you're smiling or not. Smile! You shoud see the corresponding result on the RPi Sensehat. \r\n\r\n![Happy Pi](./img/happy.png)"
    }
  
  ]
  }

