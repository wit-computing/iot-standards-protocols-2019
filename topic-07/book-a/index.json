


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Blynk",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>Remote Hardware Control via Mobile App.</p>",
  "folder" : "book-a",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# IoT Mobile Apps using Blynk",
    "shortTitle": "Blynk",
    "contentMd" : "# IoT Mobile Apps using Blynk\r\n\r\nRemote Hardware Control via Mobile App.\r\n\r\nBlynk was designed for the Internet of Things. It can control hardware remotely, it can display sensor data, it can store and visualise data. \r\n\r\n![Blynk](./img/main.png)\r\n\r\nIn this lab you will:\r\n\r\n+ Use the Blynk app to control a Raspberry Pi\r\n+ Access your Phone sensors (light and GPS)\r\n+ Send data to 3rd party service (Thingspeak)\r\n+ Send your Phone location to Wia. "
    },
  
    {
    "title": "## Install the Blynk App",
    "shortTitle": "01",
    "contentMd" : "## Install the Blynk App\r\n\r\nYou will need the Blynk app on an Android or IoS device such as a Smart Phone or Tablet. If you don't have a device available to do this, you can [emulate Android on your desktop](https://community.blynk.cc/t/blynk-desktop-app-android-emulator/13968).\r\n\r\n+ Install the Blynk App for your Smartphone (or Tablet) from [here](https://www.blynk.cc/getting-started/).\r\n\r\n+ Use the App to do the following:\r\n+ Create a new account in Blynk App.\r\n+ Create a New Project with the following details:\r\n    + Name: Blynk-lab1\r\n    + Choose ``Raspberry Pi 3`` as the board and the type of network connection you use with the RPi (either Wifi or Ethernet).\r\n+ After the project is created, You will see your empty app. We will add controls to it later. In the mean time, retrieve your project Auth Token in your email (check your junk folder if you can't find it).\r\n\r\n![Blynk - Blank App](./img/blynk3.png)\r\n\r\n## Install Blynk Library on the Raspberry Pi\r\n\r\nWe will use ``Node`` Blynk library to control the RPi.\r\n\r\n+ Check if Node is already on the pi. If so,you are adviced to remove it and reinstall as follows:\r\n\r\n(**BTW:** If node is already installed and you don't want to remove it, you can try to proceed to the next step and see if it works...)\r\n\r\n```bash\r\nsudo apt-get purge node nodejs node.js -y\r\nsudo apt-get autoremove\r\n```\r\n\r\n+ Update package repository and install node \r\n\r\n```bash\r\ncurl -sL \"https://deb.nodesource.com/setup_6.x\" | sudo -E bash -\r\nsudo apt-get install build-essential nodejs -y\r\nsudo apt-get install npm\r\n```\r\n\r\n\r\n## Create your Blynk App\r\n\r\n+ Make a new directory for your Blynk project\r\n\r\n```bash\r\nmkdir blynk-lab\r\n```\r\n\r\n+ In that directory,  initialise a new Node project:\r\n\r\n```bash\r\nnpm init\r\n```\r\n\r\nYou will be asked a few questions. Fill them in as you see fit - if you are unsure of any lust hit ``enter`` to use the default value.\r\n\r\n+ Install the Blynk dependencies\r\n\r\n```bash\r\nsudo npm install blynk-library --save\r\nsudo npm install onoff ---save\r\n```\r\n\r\n+ In the ``blynk-lab`` directory, create a new file called ``index.js`` with the following content:\r\n\r\n```JavaScript\r\nvar Blynk = require(\"blynk-library\");\r\n\r\nvar AUTH = 'YOUR-AUTH-TOKEN';\r\n\r\nvar blynk = new Blynk.Blynk(AUTH);\r\n\r\nvar v1 = new blynk.VirtualPin(1);\r\n\r\nv1.on('write', function(param) {\r\n  console.log('V1:', param[0]);\r\n});\r\n```\r\n\r\nThe above script creates a ``Virtual Pin`` on your Raspberry Pi. You can use this to interface, display and send data with your Blynk app on your phone.\r\n\r\n+ Run the script by entering ``node index.js`` at the command line. You should see the following output:\r\n\r\n![Blynk Node connection](./img/blynk1.png)\r\n\r\nLeave the app running on the RPi for the following section.\r\n\r\n## Send commands to the RPi From your phone app\r\nSo now lets send commands from your phone to the Raspberry Pi. Open ``Blynk-lab1`` project on your mobile device and do the following\r\n\r\n+ Click on the ``+`` icon in the menu to open the ``Widget box``\r\n\r\n![Blynk - Button](./img/blynk4.png)\r\n\r\n+ Select the ``Button`` and it should appear on your project\r\n\r\n\r\n+ Double tap the button and apply the following settings\r\n    + name it ``Light``\r\n    + In the Output section, select ``PIN`` and change it to ``Virtual V1``\r\n    + Chane the Mode to ``Switch``\r\n\r\n![Blynk - Button](./img/blynk5.png)\r\n\r\n+ Now hit the back arrow to return to the Project.\r\n\r\n+ Click the ``Run`` Button to start the app on the phone.\r\n+ Click on the ``Light`` button a few times, it will toggle between on and off.\r\n+ Examine the output on the RPi console, you should see the following:\r\n\r\n![Blynk on/off button](./img/blynk2.png)\r\n\r\nYou're now controlling tshe virtual pin from your phone from anywhere via the internet. To confirm this, you can turn off the Wifi on your phone and use the 3G/4G data from your phone network - it should still work.\r\n\r\nNext let's hook up the SenseHat to the virtual pin.\r\n\r\n+ Stop your Blynk app on the RPi by entering ``ctrl-c`` at the command line.\r\n+ Install the ``node-sense-hat`` module to your project\r\n\r\n```bash\r\nnpm install node-sense-hat --save\r\n```\r\n\r\n+ Now replace the code in ``index.js`` to the following:\r\n\r\n```javascript\r\nvar Blynk = require(\"blynk-library\");\r\n\r\nvar sense = require(\"node-sense-hat\");\r\n\r\nvar AUTH = 'YOUR-AUTH-CODE';\r\n\r\nvar blynk = new Blynk.Blynk(AUTH);\r\n\r\nvar v1 = new blynk.VirtualPin(1);\r\n\r\nvar white = [255, 255, 255];\r\nsense.Leds.clear();\r\n\r\n// v1 write call back\r\nv1.on('write', function(param) {\r\n  console.log('V1:', param[0]);\r\n  if (param[0]==1){\r\n        sense.Leds.clear(white)\r\n    }else{\r\n        sense.Leds.clear();\r\n    }\r\n});\r\n```\r\n\r\nThe updated code now includes the following; initialises the SenseHat with ``sense.Leds.clear()`` and sets the LEDs to ``white`` when the virtual pin, ``v1``, is set to 1. Every time the button is pressed in the phone app results in the callback function for the ``write`` event to execute. Compare this to how you handled Python callbacks in the MQTT lab.\r\n\r\n\r\n## Use the ZeRGBa\r\n\r\nLets replace the button with a more interactive way of conrolling the LED matrix.\r\n\r\n+ Stop the Blynk app on the phone and delete the button by double tapping, scrolling down and selecting the ``Delete`` option.\r\n+ Now, as before, open the ``Widget Box`` and add the ``zeRGBra`` widget. Your app should look like this:\r\n\r\n![zeRGBra](./img/zergbra.png)\r\n\r\n+ Double tab the zeRGBra widget and configure as follows:\r\n\r\n![zeRGBra](./img/zergbra2.png)\r\n\r\n+ Now, in ``index.js`` on the RPi, replace the ``v1.on('write'...`` call back with the following code:\r\n\r\n```javascript\r\n// v1 write call back\r\nv1.on('write', function(param) {\r\n     var colour = param.map(Number);\r\n     sense.Leds.clear(colour);\r\n});\r\n```\r\nThe above write callback converts the array of rgb values written by the zeRGBra widget to numeric(integers) and passes the values to the sensehat leds.\r\n\r\n+ Run the app again. You should now be able to set the colour of the LEDs using the zeRGBra.\r\n\r\n## Get data from the RPi to your phone \r\n\r\n+ Stop the app on your phone by clicking on the ``Stop`` icon button in the menu bar.\r\n\r\n+ Click on the ``+`` icon in the menu to open the ``Widget box`` and add a ``Value Display`` widget.\r\n\r\n+ Double tap on the ``Value Display`` widget and configure the widget to use virtual pin ``V2`` and read the temp value every 5 seconds as follows:\r\n\r\n![Temp Value Settings](./img/temp.png)\r\n\r\n+ Now, on the Raspberry Pi, replace the code in ``index.js`` with the following code:\r\n\r\n```javascript\r\nvar Blynk = require(\"blynk-library\");\r\n\r\nvar sense = require(\"node-sense-hat\");\r\nvar imu = sense.Imu;\r\nvar IMU = new imu.IMU();\r\n\r\nvar AUTH = 'YOUR-AUTH-CODE';\r\n\r\nvar blynk = new Blynk.Blynk(AUTH);\r\n\r\nvar v1 = new blynk.VirtualPin(1);\r\nvar v2 = new blynk.VirtualPin(2);\r\n\r\nvar white = [255, 255, 255];\r\nsense.Leds.clear();\r\n\r\n\r\n// v1 write call back\r\nv1.on('write', function(param) {\r\n     var colour = param.map(Number);\r\n     sense.Leds.clear(colour);\r\n});\r\n\r\nv2.on('read', function() {\r\n  IMU.getValue(function (e, data) {\r\n     v2.write(data.temperature);\r\n  })\r\n});\r\n```\r\n\r\nThe updated code \"listens\" for reads events on virtual pin ``V2``, gets the SenseHAT temperature value, and returns the temperature value to pin ``V2``.\r\n\r\n+ Now run the node app on the RPi as before using ``node index.js``.\r\n+ Run the ``Blynk-lab1`` app on your phone again by tapping the ``Run`` icon. It will now read the value of the virtual pin ``V2`` every 5 seconds and display the returned value.\r\n"
    },
  
    {
    "title": "# Phone Sensors",
    "shortTitle": "02",
    "contentMd" : "# Phone Sensors\r\n\r\n**NOTE: The following sections were tested using an Android Device (Alcatel A3). Blynk is designed to be cross platform but some variations in operation, particularly when integrating with phone sensors, may exist on different phone models. You can try this section on an emulated smartphone.**\r\n\r\nBlynk has lots of widgets for various uses. The phone app also allow you to access the phones sensors such a light sensor, accelerometer. The next example will use use a ``webhook`` to push  light sensor data to Thingspeak for analysis.\r\n\r\n+ On your phone, stop the Blynk app if it's running.\r\n+ As in previous steps, open the Widget Box and add the ``Light Sensor`` to your app (you'll need to scroll down to find it).\r\n+ Double-tap on the light sensor widget to open the settings and configure as follows:\r\n    + Set the output pin to Virtual V3\r\n    + Set the write interval to 1 second\r\n\r\n![Light Sensor](./img/light.png)\r\n\r\n+ Run the Blynk app on your phone, you should see lux (light measurement) values for light intensity in the widget. \r\n+ Now, on the RPi, we'll use the lux values to test if it's too dark (<50 lux).\r\n+ On the Raspberry Pi, stop the Blynk Node app and make the following changes to ``index.js``:\r\n    + In the variable declarations add the ``v3`` variable and a variable to record the last button state\r\n\r\n```javascript\r\nvar v3 = new blynk.VirtualPin(3);\r\n```\r\n\r\n+ add the following call back for ``V3`` at the end of ``index.js`` to handle Virtual Pin 3 (i.e. the one that's linked to the light sensor)\r\n\r\n```javascript\r\nv3.on('write', function(param) {\r\n  //check if it's too dark!\r\n  if (param[0]<50){console.log(\"It's a bit dark\")}\r\n  //You could do something interesting here like turn on lights!\r\n});\r\n\r\n```\r\n\r\n+ Now run the Node app and the phone app. You should now be able to get the RPi to display the \"It's too dark\" message on the console by covering the light sensor on your phone with your hand. The threshold is set to 50 for switching on/off. Depending on your phone and sensor values you may need to adjust the threshold value (50) used in the code to make it work.\r\n\r\n## Sending Data to Thingspeak\r\n\r\nThe Blynk Webhook widget allows you to communicate with 3rd party services. With Webhook widget you can send HTTP(S) requests to any 3rd party service or devices that has HTTP(S) API (e.g. other smart devices with a Web API, Thingspeak, Smart Lights). \r\n\r\n### Thingspeak Temperature Channel\r\n\r\n+ Go to Thingspeak and, if you haven't already, create a new channel for Temperature data. You can use one from previous labs if you want. (See last weeks lab/tutorial)\r\n\r\n+ Retrieve your ``Write API Key`` for the channel you wish to use. \r\n\r\n### Blynk Phone App\r\n\r\n+ On your phone, stop the Blynk app if it's running.\r\n+ As in previous steps, open the Widget Box and add the ``Webhook`` widget to your app (you'll need to scroll down to find it).\r\n+ For this part, we will want to monitor virtual pin ``V2`` and send the data to Thingspeak.\r\n\r\n+ Double tap the Webhook widget and configure as shown below:\r\n\r\n![Webhook](./img/webhook.png)\r\n\r\n**The URL field should be filled in as follows:**\r\n```\r\nhttps://api.thingspeak.com/update?api_key=YOUR_API_WRITE_KEY&field1=/pin/\r\n```\r\n\r\nNow, every time there is a “write” command to V2 pin on the Raspberry Pi the Webhook will be triggered and write the value (in this case the temp) into the URL using the ``/pin/`` placeholder.\r\nSee [here](https://docs.blynk.cc/#widgets-other-webhook) for more details\r\n\r\n+ Now run your Phone app and Node app again. You should see temperature data appear in thingspeak (and you didn't even have to write any code!_)\r\n\r\n![Thingspeak Data](./img/thing.png)"
    },
  
    {
    "title": "## Location/GPS Streaming",
    "shortTitle": "03",
    "contentMd" : "## Location/GPS Streaming\r\n\r\nIn this section we will use Blynk's GPS streaming feature to push the phone location\r\n\r\n```\r\nnpm install wia --save\r\n```\r\n ## Add the GPS Widget\r\n\r\n + If running, stop the Blynk app on you phone.\r\n  +  **You will need to delete a widget to complete this section if you wish to remain in the \"free tier\". Delete the ``light sensor `` widget. This will give you enough energy for the GPS widget!**\r\n + Open the ``Widget Box`` abd add the ``GPS widget``\r\n + Configure as follows, making sure to select ``V4`` as the output.\r\n\r\n![GPS Widget](./img/gpswidget.png)\r\n\r\n## Creating your Location Tracking Device\r\n\r\n\r\n+ Go to the Wia dashboard and select Devices.\r\n+ From here, click on the ``+`` symbol and the ``Add New Device`` wuindow will appear.\r\n+ Enter 'Location Device' as the name and click Add Device.\r\n\r\n ![Add Device](./img/adddevice.png)\r\n\r\n+ Click on View device to go to the device's overview page. Take a note of the device's secret key, you'll need this later.\r\n\r\n\r\n## Update index.js\r\n\r\n+ If running, Stop the RPi Node app.\r\n\r\n+ Open ``index.js`` in an editor and add the following line of code to the top of the file. Replace the device-secret-key on with your device's ``secret key``.\r\n\r\n```javascript\r\nvar wia = require('wia')('d_sk_toXDqefgzX51VLutF8GNlnDm');\r\n```\r\n\r\n+ At the end of the script, add the following code to handle the GPS data write event from the device and send it to ``Wia`` using MQTT.\r\n\r\n```javascript\r\nv4.on('write', function(param) {\r\n console.log(\"v4: lat. \" + param[0])\r\n wia.locations.publish({\r\n  latitude: param[0],\r\n  longitude: param[1]\r\n});\r\n});\r\n\r\nwia.stream.connect();\r\n```\r\n\r\n+ Now run both the RPi Node app and the Phone App. Make sure the location/GPS is switched on. \r\n\r\n+ Open Wia in a browser and go to the Locations tab for your device. You should start to see your location appear in the Wia platform.\r\n\r\n![Wia Locations](./img/locations.png)\r\n\r\n+ Click on the ``Overview`` tab in add a Map widget by clicking the ``Add a Widget`` button. \r\n\r\n![Add Location Widget](./img/location2.png)\r\n\r\n+ Give it a name \"Locaton\" and you should now see your device location, sent from the Blynk app.\r\n\r\n![Add Location Widget](./img/map.png)\r\n\r\n"
    }
  
  ]
  }

